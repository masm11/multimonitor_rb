#!/usr/bin/env ruby
# coding: utf-8

# Multi Monitor - shows graphs of multiple device informations
# Copyright (C) 2014 Yuuki Harano
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'gobject-introspection'
require 'gtk3'
# require 'mpa'

require 'multimonitor/draw'
require 'multimonitor/battery'
require 'multimonitor/cpufreq'
require 'multimonitor/loadavg'
require 'multimonitor/cpuload'
require 'multimonitor/network'
require 'multimonitor/memory'
require 'multimonitor/swap'
require 'multimonitor/disk'
require 'multimonitor/temp'
require 'multimonitor/rfkill'

Gtk.init

module MatePanelApplet
end
loader = GObjectIntrospection::Loader.new(MatePanelApplet)
loader.load('MatePanelApplet')

class Device
  @dev = nil
  def dev=(dev)
    @dev = dev
  end
  def dev
    @dev
  end
  
  @drawable = nil
  def drawable=(drawable)
    @drawable = drawable
  end
  def drawable
    @drawable
  end
  
  @layout = nil
  def layout=(layout)
    @layout = layout
  end
  def layout
    @layout
  end
  
  @pixbuf = nil
  def pixbuf=(pixbuf)
    @pixbuf = pixbuf
  end
  def pixbuf
    @pixbuf
  end
end

def draw_dev (dev)
  ctxt = dev.drawable.window.create_cairo_context
  ctxt.save do
    ctxt.set_source_pixbuf(dev.pixbuf)
    ctxt.paint
  end
  ctxt.show_pango_layout(dev.layout)
end

geometry = nil
width = 48
height = 48
font = 'sans 8'
orientation = :horizontal

devices = []
d2d = {}	# drawable to device

#i = 0
#while i < ARGV.length
#  case ARGV[i]
#  when '--geometry'
#    i += 1
#    geometry = ARGV[i]
#    i += 1
#    
#  when '--width'
#    i += 1
#    width = ARGV[i].to_i
#    i += 1
#    
#  when '--height'
#    i += 1
#    height = ARGV[i].to_i
#    i += 1
#
#  when '--font'
#    i += 1
#    font = ARGV[i]
#    i += 1
#
#  when '--vertical'
#    i += 1
#    orientation = :vertical
#
#  when '--horizontal'
#    i += 1
#    orientation = :horizontal
#    
#  when '--battery'
#    i += 1
#    dev = Device.new
#    dev.dev = Battery.new(ARGV[i])
#    devices << dev
#    i += 1
#    
#  when '--cpufreq'
#    i += 1
#    dev = Device.new
#    dev.dev = CPUFreq.new(ARGV[i])
#    devices << dev
#    i += 1
#
#  when '--loadavg'
#    i += 1
#    dev = Device.new
#    dev.dev = LoadAvg.new(ARGV[i])
#    devices << dev
#    i += 1
#
#  when '--cpuload'
#    i += 1
#    dev = Device.new
#    dev.dev = CPULoad.new(ARGV[i])
#    devices << dev
#    i += 1
#
#  when '--network'
#    i += 1
#    dev = Device.new
#    dev.dev = Network.new(ARGV[i])
#    devices << dev
#    i += 1
#
#  when '--memory'
#    i += 1
#    dev = Device.new
#    dev.dev = Memory.new
#    devices << dev
#
#  when '--swap'
#    i += 1
#    dev = Device.new
#    dev.dev = Swap.new(ARGV[i])
#    devices << dev
#    i += 1
#
#  when '--disk'
#    i += 1
#    dev = Device.new
#    dev.dev = Disk.new(ARGV[i])
#    devices << dev
#    i += 1
#
#  when '--temp'
#    i += 1
#    dev = Device.new
#    dev.dev = Temp.new(ARGV[i])
#    devices << dev
#    i += 1
#    
#  when '--rfkill'
#    i += 1
#    dev = Device.new
#    dev.dev = RfKill.new(ARGV[i])
#    devices << dev
#    i += 1
#
#  else
#    $stderr.puts('unknown args.')
#    exit(1)
#  end
#  
#end

class MultiMonitor
  def initialize(applet)
    width = 48
    height = 48
    orientation = :horizontal
    @font = 'sans 5'
    
    @applet = applet
    @devices = []
    @d2d = {}	# drawable to device
    
    @devices = device_list
    
    box = Gtk::Box.new(orientation, 1)
    box.show
    applet.add(box)
    
    fontdesc = Pango::FontDescription.new(@font)
    
    for dev in @devices
      dev.drawable = Gtk::DrawingArea.new
      dev.drawable.show
      dev.drawable.set_size_request(width, height)
      dev.drawable.signal_connect('draw') do |w|
        draw_dev(@d2d[w])
      end
      @d2d[dev.drawable] = dev
      box.add(dev.drawable)
      
      dev.layout = dev.drawable.create_pango_layout
      dev.layout.markup = "<span foreground='white'>" + dev.dev.get_label + "</span>"
      dev.layout.font_description = fontdesc
      
      dev.pixbuf = Gdk::Pixbuf.new(Gdk::Pixbuf::COLORSPACE_RGB, false, 8, width, height)
      draw_clear(dev.pixbuf)
    end
    
    tick_count = 0
    
    GLib::Timeout.add(250) do
      for i in 0...@devices.length
        dev = @devices[i]
        
        if tick_count % dev.dev.get_tick_per_draw == 0
          dev.dev.read_data
          dev.dev.discard_data(width)
          
          dev.dev.draw_1(dev.pixbuf)
          draw_dev(dev)
          
          tooltip = dev.dev.get_tooltip_text
          dev.drawable.set_tooltip_text(tooltip)
        end
      end
      
      tick_count += 1
      true
    end
  end
  
  private
  def device_list
    list = []
    
    dev = Device.new; dev.dev = Battery.new('0');      list << dev
    dev = Device.new; dev.dev = CPUFreq.new('0');      list << dev
    dev = Device.new; dev.dev = CPUFreq.new('1');      list << dev
    dev = Device.new; dev.dev = CPUFreq.new('2');      list << dev
    dev = Device.new; dev.dev = CPUFreq.new('3');      list << dev
    dev = Device.new; dev.dev = LoadAvg.new('1');      list << dev
    dev = Device.new; dev.dev = CPULoad.new('0');      list << dev
    dev = Device.new; dev.dev = CPULoad.new('1');      list << dev
    dev = Device.new; dev.dev = CPULoad.new('2');      list << dev
    dev = Device.new; dev.dev = CPULoad.new('3');      list << dev
    dev = Device.new; dev.dev = Network.new('wlp1s0'); list << dev
    dev = Device.new; dev.dev = Network.new('lo');     list << dev
    dev = Device.new; dev.dev = Memory.new;            list << dev
    dev = Device.new; dev.dev = Swap.new('/dev/sda8'); list << dev
    dev = Device.new; dev.dev = Disk.new('sda');       list << dev
    dev = Device.new; dev.dev = Temp.new('0-coretemp-1');     list << dev
    
    list
  end
end

ret = MatePanelApplet::Applet.factory_main('MultiMonitorAppletFactory', true, MatePanelApplet::Applet.gtype) do |applet, iid|
  MultiMonitor.new(applet)
  applet.show
  true
end
p ret
